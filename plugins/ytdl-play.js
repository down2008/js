const { cmd } = require('../command');
const fetch = require('node-fetch');
const ytsearch = require('yt-search');

const pendingChoices = new Map(); // userId -> { downloadUrl, title, from }

function toSmallCaps(text) {
  const map = {
    a: '·¥Ä', b: ' ô', c: '·¥Ñ', d: '·¥Ö', e: '·¥á', f: 'Íú∞', g: '…¢', h: ' ú',
    i: '…™', j: '·¥ä', k: '·¥ã', l: ' ü', m: '·¥ç', n: '…¥', o: '·¥è', p: '·¥ò',
    q: '«´', r: ' Ä', s: 's', t: '·¥õ', u: '·¥ú', v: '·¥†', w: '·¥°', x: 'x',
    y: ' è', z: '·¥¢'
  };
  return text.toLowerCase().split('').map(c => map[c] || c).join('');
}

cmd({
    pattern: "play",
    alias: ["mp3"],
    react: 'üé∂',
    desc: "Download a YouTube song",
    category: "download",
    use: ".mp3 <YouTube URL or Song Name>",
    filename: __filename
}, async (conn, m, store, { from, prefix, quoted, q, reply }) => {
    try {
        if (!q) return reply("*üéµ ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥ú Ä ü ·¥è Ä s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á.*");

        const searchResult = await ytsearch(q);
        if (!searchResult.videos || searchResult.videos.length === 0)
            return reply("‚ùå No results found!");

        const video = searchResult.videos[0];
        const apiUrl = `https://apis.davidcyriltech.my.id/youtube/mp3?url=${encodeURIComponent(video.url)}`;

        const res = await fetch(apiUrl);
        const data = await res.json();

        if (data.status !== 200 || !data.success || !data.result.downloadUrl)
            return reply("‚ö†Ô∏è Failed to fetch the audio. Please try again later.");

        // Utilisation de la fonction pour styliser les mots-cl√©s
        const styledTitle = toSmallCaps("Title:");
        const styledDuration = toSmallCaps("Duration:");
        const styledViews = toSmallCaps("Views:");
        const styledAuthor = toSmallCaps("Author:");
        const styledLink = toSmallCaps("Link:");
        const styledReply = toSmallCaps("Reply with");
        const styledAudio = "`audio`";
        const styledDocument = "`document`";
        const styledEnjoy = toSmallCaps("Enjoy your music üé∂");

        const songInfo = `
‚ï≠‚îÄ‚îÄ „Äé ùêåùêÑùêÜùêÄùêãùêéùêÉùêéùêç-ùêåùêÉ „Äè
‚îÇ ‚øª *${styledTitle}* ${video.title}
‚îÇ ‚øª *${styledDuration}* ${video.timestamp}
‚îÇ ‚øª *${styledViews}* ${video.views}
‚îÇ ‚øª *${styledAuthor}* ${video.author.name}
‚îÇ ‚øª *${styledLink}* ${video.url}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚≠ë‚îÄ
> *${styledReply}*  ${styledAudio} *·¥è Ä* ${styledDocument} *·¥õ·¥è ·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ.*
> *${styledEnjoy}*
        `;

        await conn.sendMessage(from, {
            image: { url: data.result.image || '' },
            caption: songInfo
        }, { quoted: m });

        pendingChoices.set(m.sender, {
            downloadUrl: data.result.downloadUrl,
            title: data.result.title,
            from
        });

    } catch (err) {
        console.error(err);
        reply("‚ùå An error occurred. Please try again later.");
    }
});

conn.ev.on("messages.upsert", async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message) return;

    let text = "";
    if (msg.message.conversation) {
        text = msg.message.conversation;
    } else if (msg.message.extendedTextMessage && msg.message.extendedTextMessage.text) {
        text = msg.message.extendedTextMessage.text;
    } else {
        return;
    }

    text = text.toLowerCase().trim();
    const userId = msg.key.participant || msg.key.remoteJid;

    if (!pendingChoices.has(userId)) return;

    const choiceData = pendingChoices.get(userId);

    if (text === "audio") {
        await conn.sendMessage(choiceData.from, {
            audio: { url: choiceData.downloadUrl },
            mimetype: "audio/mpeg"
        }, { quoted: msg });
        pendingChoices.delete(userId);
    } else if (text === "document") {
        await conn.sendMessage(choiceData.from, {
            document: { url: choiceData.downloadUrl },
            mimetype: "audio/mpeg",
            fileName: `${choiceData.title}.mp3`,
            caption: "> *¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú*"
        }, { quoted: msg });
        pendingChoices.delete(userId);
    }
});
