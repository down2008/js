const { cmd } = require('../command');

cmd({
    pattern: "unmute",
    alias: ["groupunmute"],
    react: "üîä",
    desc: "Unmute the group (Everyone can send messages).",
    category: "group",
    filename: __filename
},           
async (conn, mek, m, { from, reply, isGroup }) => {
    try {
        if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");

        // Fetch group metadata to check admins
        const metadata = await conn.groupMetadata(from);
        const groupAdmins = metadata.participants
            .filter(p => p.admin !== null)
            .map(p => p.id);

        const botJid = conn.user.id;
        if (!groupAdmins.includes(botJid)) 
            return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.");

        const senderId = m.sender;
        if (!groupAdmins.includes(senderId)) 
            return reply("‚ùå ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

        // Unlock the group for everyone
        await conn.groupSettingUpdate(from, "not_announcement");
        reply("‚úÖ …¢ Ä·¥è·¥ú·¥ò  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö. ·¥á·¥†·¥á Ä è·¥è…¥·¥á ·¥Ñ·¥Ä…¥ …¥·¥è·¥° s·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás.");

    } catch (e) {
        console.error("Error unmuting group:", e);
        reply("‚ùå Failed to unmute the group. Please try again.");
    }
});
