const axios = require("axios");
const { cmd } = require("../command");

cmd({
  pattern: "fancy",
  alias: ["font", "style"],
  react: "‚úçÔ∏è",
  desc: "Convert text into various fancy fonts.",
  category: "tools",
  filename: __filename
}, async (conn, mek, m, {
  from,
  quoted,
  body,
  isCmd,
  command,
  args,
  q,
  reply
}) => {
  try {
    if (!q) return reply("‚ùé œÅ‚Ñì—îŒ±—ï—î œÅ—èœÉŒΩŒπ‚àÇ—î —Ç—îœá—Ç —ÇœÉ ¬¢œÉŒ∑ŒΩ—î—è—Ç.\n\n*—îœáŒ±–ºœÅ‚Ñì—î:* .∆íŒ±Œ∑¬¢—É –Ω—î‚Ñì‚ÑìœÉ");

    const apiUrl = `https://billowing-waterfall-dbab.bot1newnew.workers.dev/?word=${encodeURIComponent(q)}`;
    const res = await axios.get(apiUrl);

    if (!Array.isArray(res.data)) {
      return reply("‚ùå Error fetching fonts. Try again later.");
    }

    const fonts = res.data;
    const maxDisplay = 44;
    const displayList = fonts.slice(0, maxDisplay);

    let menuText = "‚ï≠‚îÄ‚îÄ„Äî *ùêÖùêÄùêçùêÇùêò ùêíùêìùêòùêãùêÑùêí* „Äï‚îÄ‚îÄ‚¨£\n";
    displayList.forEach((f, i) => {
      menuText += `‚îÉ ${i + 1}. ${f}\n`;
    });
    menuText += "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¨£\n\nüìå * Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä “ì·¥è…¥·¥õ s·¥õ è ü·¥á “ì·¥è Ä:*\n‚ùù " + q + " ‚ùû";

    const sentMsg = await conn.sendMessage(from, {
      text: menuText
    }, { quoted: m });

    const messageID = sentMsg.key.id;

    const messageHandler = async (msgData) => {
      const receivedMsg = msgData.messages?.[0];
      if (!receivedMsg || !receivedMsg.message) return;

      const receivedText = receivedMsg.message.conversation ||
        receivedMsg.message.extendedTextMessage?.text;

      const senderID = receivedMsg.key.remoteJid;
      const isReplyToBot = receivedMsg.message.extendedTextMessage?.contextInfo?.stanzaId === messageID;

      if (isReplyToBot && senderID === from) {
        const selectedNumber = parseInt(receivedText.trim());
        if (isNaN(selectedNumber) || selectedNumber < 1 || selectedNumber > displayList.length) {
          return conn.sendMessage(from, {
            text: "‚ùé …™…¥·¥†·¥Ä ü…™·¥Ö s·¥á ü·¥á·¥Ñ·¥õ…™·¥è…¥. ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥Ä …¥·¥ú·¥ç ô·¥á Ä “ì Ä·¥è·¥ç 1 ·¥õ·¥è " + displayList.length + ".",
          }, { quoted: receivedMsg });
        }

        const chosen = displayList[selectedNumber - 1];
        const finalText = `‚ú® * è·¥è·¥ú Ä ·¥õ·¥áx·¥õ …™…¥ s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö s·¥õ è ü·¥á:*\n\n${chosen}\n\n> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú*`;

        await conn.sendMessage(from, {
          text: finalText
        }, { quoted: receivedMsg });
      }
    };

    conn.ev.on("messages.upsert", messageHandler);
  } catch (error) {
    console.error("‚ùå Error in .fancy:", error);
    reply("‚ö†Ô∏è An error occurred while processing.");
  }
});
