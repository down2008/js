const { cmd } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer } = require('../lib/functions2'); // Assure-toi que cette fonction r√©cup√®re bien les buffers via axios
const path = require('path');

cmd({
    pattern: "linkgroup",
    alias: ["link", "invite", "grouplink", "satan-link"],
    desc: "Get group invite link.",
    category: "group",
    react: "üôãüèª‚Äç‚ôÇÔ∏è",
    filename: __filename,
}, async (conn, mek, m, { from, quoted, body, args, q, isGroup, sender, reply }) => {
    try {
        if (!isGroup) return reply("> ‚ùå ·¥õ ú…™s “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s ·¥è…¥ ü è ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á …™…¥ …¢ Ä·¥è·¥ú·¥òs.");

        const senderNumber = sender.split('@')[0];
        const botNumber = conn.user.id.split(':')[0];

        const groupMetadata = await conn.groupMetadata(from);
        const groupAdmins = groupMetadata.participants.filter(member => member.admin);
        const isBotAdmins = groupAdmins.some(admin => admin.id === botNumber + '@s.whatsapp.net');
        const isAdmins = groupAdmins.some(admin => admin.id === sender);

        if (!isBotAdmins) return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è “ì·¥á·¥õ·¥Ñ ú ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò  ü…™…¥·¥ã.");
        if (!isAdmins) return reply("‚ùå ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

        const inviteCode = await conn.groupInviteCode(from);
        if (!inviteCode) return reply("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥õ Ä…™·¥á·¥†·¥á ·¥õ ú·¥á …™…¥·¥†…™·¥õ·¥á ·¥Ñ·¥è·¥Ö·¥á.");

        const inviteLink = `https://chat.whatsapp.com/${inviteCode}`;
        const ownerJid = groupMetadata.owner || '';
        const groupOwner = ownerJid ? '@' + ownerJid.split('@')[0] : 'Unknown';
        const groupName = groupMetadata.subject || 'Unknown';
        const groupId = groupMetadata.id || from;
        const memberCount = groupMetadata.participants.length;

        const infoText = `‚ü£‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü¢
‚îã *…¢ Ä·¥è·¥ú·¥ò …¥·¥Ä·¥ç·¥á* : ${groupName}
‚îã *·¥è·¥°…¥·¥á Ä* : ${groupOwner}
‚îã *·¥ç·¥á·¥ç ô·¥á Äs* : ${memberCount}
‚îã *…¢  ü…™…¥·¥ã* : ${inviteLink}
‚ü£‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü¢
> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö è ô è ·¥õ·¥á·¥Ñ ú`;

        let ppUrl;
        try {
            ppUrl = await conn.profilePictureUrl(from, 'image');
        } catch {
            ppUrl = 'https://telegra.ph/file/6880771a42bad09dd6087.jpg'; // Fallback photo
        }

        const buffer = await getBuffer(ppUrl);

        return conn.sendMessage(from, {
            image: buffer,
            caption: infoText,
            mentions: [ownerJid]
        }, { quoted: m });

    } catch (error) {
        console.error("‚ùå Error in linkgroup command:", error);
        reply(`‚ö†Ô∏è ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö: ${error.message || "Unknown error"}`);
    }
});
