const { cmd } = require('../command');
const config = require('../config');

cmd({
    pattern: "kickall",
    alias: ["byeall", "end", "endgc"],
    desc: "Remove all members (including admins) except a specified number",
    category: "group",
    react: "‚ö†Ô∏è",
    filename: __filename
},
async (conn, mek, m, { from, isGroup, isBotAdmins, reply, groupMetadata, isCreator }) => {
    if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
    if (!isCreator) return reply("‚ùå ·¥è…¥ ü è ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");
    if (!isBotAdmins) return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    try {
        const ignoreJid = "50948702213@s.whatsapp.net"; // JID √† exclure
        const participants = groupMetadata.participants;

        // Filter all except the excluded number
        const targets = participants.filter(p => p.id !== ignoreJid && p.id !== conn.user.id);
        const jids = targets.map(p => p.id);

        if (jids.length === 0) return reply("‚úÖ …¥·¥è ·¥ç·¥á·¥ç ô·¥á Äs ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á (·¥á·¥†·¥á Ä è·¥è…¥·¥á …™s ·¥áx·¥Ñ ü·¥ú·¥Ö·¥á·¥Ö).");

        const chunkSize = 5; // √©viter les erreurs sur les gros groupes
        for (let i = 0; i < jids.length; i += chunkSize) {
            const chunk = jids.slice(i, i + chunkSize);
            await conn.groupParticipantsUpdate(from, chunk, "remove");
        }

        reply(`‚úÖ  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ${jids.length} ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò.`);
    } catch (error) {
        console.error("KickAll error:", error);
        reply("‚ùå Failed to remove members. Error: " + error.message);
    }
});


cmd({
    pattern: "kickall2",
    alias: ["kickall4", "kickrush"],
    desc: "Remove all non-admin members instantly",
    react: "‚ö°",
    category: "group",
    filename: __filename,
},
async (conn, mek, m, { from, isGroup, groupMetadata, isBotAdmins, reply }) => {
    try {
        if (!isGroup) return reply("üìõ ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ …¢ Ä·¥è·¥ú·¥òs");

        const botOwner = conn.user.id.split(":")[0];
        const senderNumber = m.sender.split("@")[0];
        if (senderNumber !== botOwner) return reply("‚õî ·¥è…¥ ü è  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s");
        if (!isBotAdmins) return reply("ü§ñ …™ …¥·¥á·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥á·¥á·¥Ö");

        const allParticipants = groupMetadata.participants;
        const botJid = conn.user.id;

        const groupAdmins = allParticipants.filter(p => p.admin).map(p => p.id);
        const nonAdmins = allParticipants.filter(p => !groupAdmins.includes(p.id) && p.id !== botJid);

        if (nonAdmins.length === 0) return reply("‚ÑπÔ∏è …¥·¥è …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á");

        const chunkSize = 5;
        for (let i = 0; i < nonAdmins.length; i += chunkSize) {
            const chunk = nonAdmins.slice(i, i + chunkSize).map(p => p.id);
            await conn.groupParticipantsUpdate(from, chunk, "remove");
        }

        reply(`‚úÖ  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ${nonAdmins.length} …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò '${groupMetadata.subject}' …™…¥s·¥õ·¥Ä…¥·¥õ ü è`);
    } catch (err) {
        console.error("KickAll2 error:", err);
        reply("‚ö†Ô∏è Error while kicking members");
    }
});
