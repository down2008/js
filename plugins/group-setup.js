const { cmd } = require("../command");

cmd({
  pattern: "promote",
  alias: ["p", "giveadmin", "makeadmin"],
  desc: "Promote a user to admin",
  category: "group",
  react: "üî∫",
  filename: __filename
}, async (conn, mek, m, {
  from,
  isCreator,
  isBotAdmins,
  isAdmins,
  isGroup,
  quoted,
  reply
}) => {
  try {
    if (!isGroup) return reply("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ *…¢ Ä·¥è·¥ú·¥òs*.");
    if (!isBotAdmins) return reply("‚ùå …™ ·¥ç·¥ús·¥õ  ô·¥á *·¥Ä·¥Ö·¥ç…™…¥* ·¥õ·¥è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á.");
    if (!isAdmins && !isCreator) return reply("üîê ·¥è…¥ ü è *…¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s* ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    // Your user extraction logic
    if (!m.quoted && (!m.mentionedJid || m.mentionedJid.length === 0)) {
      return reply("‚ùì You did not give me a user!?");
    }

    let users = m.mentionedJid[0]
      ? m.mentionedJid[0]
      : m.quoted
      ? m.quoted.sender
      : null;

    if (!users) return reply("‚ö†Ô∏è Couldn't determine target user.");

    const parts = users.split('@')[0];
    const ownerJid = conn.user.id.split(":")[0] + '@s.whatsapp.net';

    if (users === ownerJid) return reply("üëë ·¥õ ú·¥Ä·¥õ's ·¥õ ú·¥á *·¥è·¥°…¥·¥á Ä's …¥·¥ú·¥ç ô·¥á Ä!* ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü!");

    // Promote without checking if already admin
    await conn.groupParticipantsUpdate(from, [users], "promote");

    reply(`*‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥.*`, { mentions: [users] });

  } catch (err) {
    console.error(err);
    reply("‚ùå Failed to promote. Something went wrong.");
  }
});

cmd({
  pattern: "demote",
  alias: ["d", "dismiss", "removeadmin"],
  desc: "Demote a group admin",
  category: "group",
  react: "üîª",
  filename: __filename
}, async (conn, mek, m, {
  from,
  isCreator,
  isBotAdmins,
  isAdmins,
  isGroup,
  participants,
  quoted,
  reply
}) => {
  try {
    if (!isGroup) return reply("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs …™…¥ *…¢ Ä·¥è·¥ú·¥òs*.");
    if (!isBotAdmins) return reply("‚ùå I ·¥ç·¥ús·¥õ  ô·¥á *·¥Ä·¥Ö·¥ç…™…¥* ·¥õ·¥è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á s·¥è·¥ç·¥á·¥è…¥·¥á.");
    if (!isAdmins && !isCreator) return reply("üîê ·¥è…¥ ü è *…¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s* ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    // Your user extraction logic
    if (!m.quoted && (!m.mentionedJid || m.mentionedJid.length === 0)) {
      return reply("‚ùì  è·¥è·¥ú ·¥Ö…™·¥Ö …¥·¥è·¥õ …¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä!?");
    }

    let users = m.mentionedJid[0]
      ? m.mentionedJid[0]
      : m.quoted
      ? m.quoted.sender
      : null;

    if (!users) return reply("‚ö†Ô∏è Couldn't determine target user.");

    const parts = users.split('@')[0];
    const ownerJid = conn.user.id.split(":")[0] + '@s.whatsapp.net';

    if (users === ownerJid) return reply("üëë ·¥õ ú·¥Ä·¥õ's ·¥õ ú·¥á *·¥è·¥°…¥·¥á Ä's …¥·¥ú·¥ç ô·¥á Ä!* …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥õ ú·¥Ä·¥õ.");

    // No admin check ‚Äî always try to demote
    await conn.groupParticipantsUpdate(from, [users], "demote");

    reply(`*‚úÖ ·¥Ä·¥Ö·¥ç…™…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä …¥·¥è Ä·¥ç·¥Ä ü ·¥ç·¥á·¥ç ô·¥á Ä.*`, { mentions: [users] });

  } catch (err) {
    console.error(err);
    reply("‚ùå Failed to demote. Something went wrong.");
  }
});
