const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions');
const { writeFileSync } = require('fs');
const path = require('path');

let antilinkAction = "off"; // Default state
let warnCount = {}; // Track warnings per user

const os = require('os');
const { exec } = require('child_process');
const axios = require('axios');
const FormData = require('form-data');
const { setConfig, getConfig } = require("../lib/configdb");



// SET BOT IMAGE
cmd({
  pattern: "setbotimage",
  desc: "Set the bot's image URL",
  category: "owner",
  react: "‚úÖ",
  filename: __filename
}, async (conn, mek, m, { args, isCreator, reply, isOwner }) => {
  try {
    if (!isOwner && !isCreator) return reply("‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    let imageUrl = args[0];

    // Upload image if replying to one
    if (!imageUrl && m.quoted) {
      const quotedMsg = m.quoted;
      const mimeType = (quotedMsg.msg || quotedMsg).mimetype || '';
      if (!mimeType.startsWith("image")) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á.");

      const mediaBuffer = await quotedMsg.download();
      const extension = mimeType.includes("jpeg") ? ".jpg" : ".png";
      const tempFilePath = path.join(os.tmpdir(), `botimg_${Date.now()}${extension}`);
      fs.writeFileSync(tempFilePath, mediaBuffer);

      const form = new FormData();
      form.append("fileToUpload", fs.createReadStream(tempFilePath), `botimage${extension}`);
      form.append("reqtype", "fileupload");

      const response = await axios.post("https://catbox.moe/user/api.php", form, {
        headers: form.getHeaders()
      });

      fs.unlinkSync(tempFilePath);

      if (typeof response.data !== 'string' || !response.data.startsWith('https://')) {
        throw new Error(`Catbox upload failed: ${response.data}`);
      }

      imageUrl = response.data;
    }

    if (!imageUrl || !imageUrl.startsWith("http")) {
      return reply("‚ùå ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö …™·¥ç·¥Ä…¢·¥á ·¥ú Ä ü ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á.");
    }

    await setConfig("MENU_IMAGE_URL", imageUrl);

    await reply(`‚úÖ  ô·¥è·¥õ …™·¥ç·¥Ä…¢·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö.\n\n*…¥·¥á·¥° ·¥ú Ä ü:* ${imageUrl}\n\n‚ôªÔ∏è  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...`);
    setTimeout(() => exec("pm2 restart all"), 2000);

  } catch (err) {
    console.error(err);
    reply(`‚ùå Error: ${err.message || err}`);
  }
});

// SET PREFIX
cmd({
  pattern: "setprefix",
  desc: "Set the bot's command prefix",
  category: "owner",
  react: "‚úÖ",
  filename: __filename
}, async (conn, mek, m, { args, isCreator, reply, isOwner }) => {
  if (!isOwner && !isCreator) return reply("‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");
  const newPrefix = args[0]?.trim();
  if (!newPrefix || newPrefix.length > 2) return reply("‚ùå ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ò Ä·¥á“ì…™x (1‚Äì2 characters).");

  await setConfig("PREFIX", newPrefix);

  await reply(`‚úÖ ·¥ò Ä·¥á“ì…™x ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è: *${newPrefix}*\n\n‚ôªÔ∏è  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...`);
  setTimeout(() => exec("pm2 restart all"), 2000);
});





// SET OWNER NAME
cmd({
  pattern: "setownername",
  desc: "Set the owner's name",
  category: "owner",
  react: "‚úÖ",
  filename: __filename
}, async (conn, mek, m, { args, isCreator, reply, isOwner }) => {
  if (!isOwner && !isCreator) return reply("‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");
  const name = args.join(" ").trim();
  if (!name) return reply("‚ùå ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä…¥ ·¥è·¥°…¥·¥á Ä …¥·¥Ä·¥ç·¥á.");

  await setConfig("OWNER_NAME", name);

  await reply(`‚úÖ ·¥è·¥°…¥·¥á Ä …¥·¥Ä·¥ç·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è: *${name}*\n\n‚ôªÔ∏è  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...`);
  setTimeout(() => exec("pm2 restart all"), 2000);
});


let antibotAction = "off"; // Default action is off
let warnings = {}; // Store warning counts per user


cmd({
    pattern: "antibot",
    react: "ü´ü",
    alias: ["antibot"],
    desc: "Enable Antibot and set action (off/warn/delete/kick)",
    category: "group",
    filename: __filename
}, async (conn, mek, m, { q, reply, isGroup, isAdmins, isOwner }) => {

    if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
    if (!isAdmins && !isOwner) return reply("‚õî ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    if (!q) {
        return reply(`*üìõ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥Ä·¥Ñ·¥õ…™·¥è…¥:* ${antibotAction.toUpperCase()}\n\n*üß™ Usage:* .antibot off / warn / delete / kick`);
    }

    const action = q.toLowerCase();
    if (["off", "warn", "delete", "kick"].includes(action)) {
        antibotAction = action;
        return reply(`‚úÖ *·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥Ä·¥Ñ·¥õ…™·¥è…¥ s·¥á·¥õ ·¥õ·¥è:* ${action.toUpperCase()}`);
    } else {
        return reply("‚ùå *Invalid action.*\n\n*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:* .·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥è…¥ / ·¥°·¥Ä Ä…¥ / ·¥Ö·¥á ü·¥á·¥õ·¥á / ·¥ã…™·¥Ñ·¥ã");
    }
});

// D√©tection de messages suspects (bots joints au groupe)
cmd({
    on: "body"
}, async (conn, mek, m, { from, isGroup, sender, isBotAdmins, isAdmins, reply }) => {
    if (!isGroup || antibotAction === "off") return;

    const messageId = mek?.key?.id || "";
    if (!messageId.startsWith("31F")) return; // messages typiques des bots (ajustable selon tes besoins)

    if (!isBotAdmins) return reply("*‚ùå …™'·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥, s·¥è …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥õ·¥Ä·¥ã·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥!*");
    if (isAdmins) return; // Ignore les admins

    // Supprimer le message
    await conn.sendMessage(from, { delete: mek.key });

    switch (antibotAction) {
        case "kick":
            await conn.groupParticipantsUpdate(from, [sender], "remove");
            break;

        case "warn":
            warnings[sender] = (warnings[sender] || 0) + 1;
            if (warnings[sender] >= 3) {
                delete warnings[sender];
                await conn.groupParticipantsUpdate(from, [sender], "remove");
            } else {
                return reply(`‚ö†Ô∏è @${sender.split("@")[0]}, ·¥°·¥Ä Ä…¥…™…¥…¢ ${warnings[sender]}/3!  ô·¥è·¥õs ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!`, {
                    mentions: [sender]
                });
            }
            break;

        case "delete":
            // Message d√©j√† supprim√©, pas besoin d'autre action
            break;
    }
});
