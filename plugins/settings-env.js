const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions');
const { writeFileSync } = require('fs');
const path = require('path');

let antilinkAction = "off"; // Default state
let warnCount = {}; // Track warnings per user

const os = require('os');
const { exec } = require('child_process');
const axios = require('axios');
const FormData = require('form-data');

let antibotAction = "off"; // Default action is off
let warnings = {}; // Store warning counts per user


cmd({
    pattern: "welcome",
    alias: ["setwelcome"],
    react: "‚úÖ",
    desc: "Enable or disable welcome messages for new members",
    category: "group",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.WELCOME = "true";
        return reply("‚úÖ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (status === "off") {
        config.WELCOME = "false";
        return reply("‚ùå ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥è…¥`);
    }
});


// WELCOME
cmd({
    pattern: "goodbye",
    alias: ["setgoodbye"],
    react: "‚úÖ",
    desc: "Enable or disable welcome messages for new members",
    category: "group",
    filename: __filename
},
async (conn, mek, m, { from, args, isCreator, reply }) => {
    if (!isCreator) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.GOODBYE = "true";
        return reply("‚úÖ …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (status === "off") {
        config.GOODBYE = "false";
        return reply("‚ùå …¢·¥è·¥è·¥Ö ô è·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥è…¥`);
    }
});

cmd({
    pattern: "antibot",
    react: "ü´ü",
    alias: ["antibot"],
    desc: "Enable Antibot and set action (off/warn/delete/kick)",
    category: "group",
    filename: __filename
}, async (conn, mek, m, { q, reply, isGroup, isAdmins, isOwner }) => {

    if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs.");
    if (!isAdmins && !isOwner) return reply("‚õî ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    if (!q) {
        return reply(`*üìõ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥Ä·¥Ñ·¥õ…™·¥è…¥:* ${antibotAction.toUpperCase()}\n\n*üß™ Usage:* .antibot off / warn / delete / kick`);
    }

    const action = q.toLowerCase();
    if (["off", "warn", "delete", "kick"].includes(action)) {
        antibotAction = action;
        return reply(`‚úÖ *·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥Ä·¥Ñ·¥õ…™·¥è…¥ s·¥á·¥õ ·¥õ·¥è:* ${action.toUpperCase()}`);
    } else {
        return reply("‚ùå *Invalid action.*\n\n*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:* .·¥Ä…¥·¥õ…™ ô·¥è·¥õ ·¥è…¥ / ·¥°·¥Ä Ä…¥ / ·¥Ö·¥á ü·¥á·¥õ·¥á / ·¥ã…™·¥Ñ·¥ã");
    }
});

// D√©tection de messages suspects (bots joints au groupe)
cmd({
    on: "body"
}, async (conn, mek, m, { from, isGroup, sender, isBotAdmins, isAdmins, reply }) => {
    if (!isGroup || antibotAction === "off") return;

    const messageId = mek?.key?.id || "";
    if (!messageId.startsWith("31F")) return; // messages typiques des bots (ajustable selon tes besoins)

    if (!isBotAdmins) return reply("*‚ùå …™'·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥, s·¥è …™ ·¥Ñ·¥Ä…¥'·¥õ ·¥õ·¥Ä·¥ã·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥!*");
    if (isAdmins) return; // Ignore les admins

    // Supprimer le message
    await conn.sendMessage(from, { delete: mek.key });

    switch (antibotAction) {
        case "kick":
            await conn.groupParticipantsUpdate(from, [sender], "remove");
            break;

        case "warn":
            warnings[sender] = (warnings[sender] || 0) + 1;
            if (warnings[sender] >= 3) {
                delete warnings[sender];
                await conn.groupParticipantsUpdate(from, [sender], "remove");
            } else {
                return reply(`‚ö†Ô∏è @${sender.split("@")[0]}, ·¥°·¥Ä Ä…¥…™…¥…¢ ${warnings[sender]}/3!  ô·¥è·¥õs ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö!`, {
                    mentions: [sender]
                });
            }
            break;

        case "delete":
            // Message d√©j√† supprim√©, pas besoin d'autre action
            break;
    }
});
